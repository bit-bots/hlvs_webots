#!/bin/bash

ROBOCUP_DIR=/srv/ssd_nvm/hlvs_webots
WEBOTS_ROBOCUP_GAME=$ROBOCUP_DIR/controllers/referee/game_$1.json

if [[ ! -f $WEBOTS_ROBOCUP_GAME ]]; then
    echo "Game configuration $WEBOTS_ROBOCUP_GAME not found."
    exit 1
fi

OUT_DIR=/srv/ssd_nvm/last_game
DOCKER_IMAGE=registry.bit-bots.de/hlvs-2023

# Array of IPs of the robots
readarray -t RED_IPS < <(jq -r '.red.hosts[]' $WEBOTS_ROBOCUP_GAME)
readarray -t BLUE_IPS < <(jq -r '.blue.hosts[]' $WEBOTS_ROBOCUP_GAME)

LOCAL_IP=$(hostname -I | awk '{print $1}')  # IP of the host running this script
CONFIGURED_SIMULATOR_IP=$(jq -r .host $WEBOTS_ROBOCUP_GAME)  # IP of the host configured to run the simulator

function get_simulator_ip_for_player() {
    # args: color bot_id
    # Returns the simulator IP for the given bot

    color=$1
    bot_id=$2
    bot_ip_idx=$(($bot_id - 1))

    # Gather IP of the bot
    if [[ "$color" == "red" ]] ; then
        configured_bot_ip=${RED_IPS[$bot_ip_idx]}
    else
        configured_bot_ip=${BLUE_IPS[$bot_ip_idx]}
    fi

    # If the bot is running on the same host as the simulator, return localhost
    # This is the case if the bot IP is localhost or the same as the local IP
    if [[ "$configured_bot_ip" == "localhost" ]] || [[ "$configured_bot_ip" == "$LOCAL_IP" ]] ; then
        echo "127.0.0.1"
    else
        echo "$CONFIGURED_SIMULATOR_IP"
    fi
}

function get_cmd_prefix() {
    # args: color bot_id
    # Returns the command prefix for the given bot

    color=$1
    bot_id=$2
    bot_ip_idx=$(($bot_id - 1))

    if [[ "$color" == "red" ]] ; then
        configured_bot_ip=${RED_IPS[$bot_ip_idx]}
    else
        configured_bot_ip=${BLUE_IPS[$bot_ip_idx]}
    fi

    if [[ "$configured_bot_ip" == "$LOCAL_IP" ]] ; then
        echo ""
    else
        echo "ssh $configured_bot_ip"
    fi
    return
}

echo "Cleanup..."

# Delete old logs
rm -rf $OUT_DIR/bot*
mkdir -p $OUT_DIR $OUT_DIR/bot_red_1 $OUT_DIR/bot_red_2 $OUT_DIR/bot_red_3 $OUT_DIR/bot_blue_1 $OUT_DIR/bot_blue_2 $OUT_DIR/bot_blue_3 $OUT_DIR/public_logs

chmod -R a+w $OUT_DIR &>/dev/null

# Delete any old containers that might still be running on local host
docker stop bot_red_1 bot_red_2 bot_red_3 bot_blue_1 bot_blue_2 bot_blue_3 &>/dev/null
docker rm bot_red_1 bot_red_2 bot_red_3 bot_blue_1 bot_blue_2 bot_blue_3 &>/dev/null

# Delete any old containers that might still be running on every active host
for ip in ${RED_IPS[@]} ${BLUE_IPS[@]}; do
    ssh $ip docker stop bot_red_1 bot_red_2 bot_red_3 bot_blue_1 bot_blue_2 bot_blue_3 &>/dev/null
    ssh $ip docker rm bot_red_1 bot_red_2 bot_red_3 bot_blue_1 bot_blue_2 bot_blue_3 &>/dev/null
done

# Kill old gamecontroller and udp bouncer
pkill -9 -f GameController &>/dev/null
pkill -9 -f udp_bouncer.py &>/dev/null
# Sometimes, the gamecontroller lock file is not cleaned
rm -f /tmp/GameController.app_lock &>/dev/null

echo "Starting game..."

red_team_config=$(dirname $WEBOTS_ROBOCUP_GAME)/$(jq -r .red.config $WEBOTS_ROBOCUP_GAME)
blue_team_config=$(dirname $WEBOTS_ROBOCUP_GAME)/$(jq -r .blue.config $WEBOTS_ROBOCUP_GAME)

red_team_id=$(jq .red.id $WEBOTS_ROBOCUP_GAME)
blue_team_id=$(jq .blue.id $WEBOTS_ROBOCUP_GAME)

nb_red=$(jq ".players | length" $red_team_config)
nb_blue=$(jq ".players | length" $blue_team_config)

function start_team() {
    # args: color team_id nb_players team_config
    color=$1
    team_id=$2
    nb_players=$3
    team_config=$4

    BASE_DOMAIN_ID=$((40 + 10 * $team_id))
    BASE_SIMULATOR_PORT=$((10000 + 10 * $team_id))
    for i in $(seq 1 $nb_players); do
        DOMAIN_ID=$((BASE_DOMAIN_ID + $i))
        BOT_ID=$i
        DOCKER_CMD=$(jq -r ".players.\"$BOT_ID\".dockerCmd" $team_config)
        SIMULATOR_PORT=$(($BASE_SIMULATOR_PORT + $BOT_ID))
        $(get_cmd_prefix $color $BOT_ID) docker run --gpus all --name bot_${color}_${BOT_ID} -d -e ROS_DOMAIN_ID=$DOMAIN_ID -e ROBOCUP_TEAM_COLOR=$color -e ROBOCUP_ROBOT_ID=${BOT_ID} -e ROBOCUP_SIMULATOR_ADDR=$(get_simulator_ip_for_player $color $i):$SIMULATOR_PORT -e ROBOCUP_MIRROR_SERVER_IP=$(get_simulator_ip_for_player $color $i) --net=host -v $OUT_DIR/bot_${color}_${BOT_ID}:/robocup-logs $DOCKER_IMAGE $DOCKER_CMD --team $team_id
    done
}

start_team red $red_team_id $nb_red $red_team_config
start_team blue $blue_team_id $nb_blue $blue_team_config

WEBOTS_ROBOCUP_GAME=$WEBOTS_ROBOCUP_GAME GAME_CONTROLLER_HOME=$ROBOCUP_DIR/GameController JAVA_HOME=/usr webots --stdout --stderr $ROBOCUP_DIR/worlds/robocup.wbt

echo "Stopping game..."

function stop_team() {
    # args: color nb_players

    color=$1
    nb_players=$2

    for i in $(seq 1 $nb_players); do
        BOT_ID=$i
        $(get_cmd_prefix $color $BOT_ID) docker stop bot_${color}_${BOT_ID}
        $(get_cmd_prefix $color $BOT_ID) docker logs bot_${color}_${BOT_ID} &> $OUT_DIR/bot_${color}_${BOT_ID}/docker.log
    done
}

stop_team red $nb_red
stop_team blue $nb_blue

cp $ROBOCUP_DIR/controllers/referee/log.txt $OUT_DIR/referee_log.txt
#chromium-browser --allow-file-access-from-files $OUT_DIR/public_logs/game.html
